The objective of this question is to implement a custom listenable response struct.
These are response types where the operation takes more time to complete and there are more than one result objects are present as part of the response.
In that situation, the caller can choose to wait till it is completed (or) caller can resume the next operation with subscribing the events using the response object in a non-blocking way.

The interface Response has methods like addResult, setError, setCompleted, subscribe(...)

Eg:
(i) Where the caller decides to wait till the whole operation is completed (a blocking wait)
response := someOperation.execute();
response.waitTillComplete();

(ii) Where the caller decides not to wait, but interested in listening to the events happening within the response (non-blocking)
response := someOperation.execute();
response.subscribe(functional hook to listen to new results, functional hook to listen for error, functional hook for completion)
//exit the main process or function as subscribing is non-blocking

The task is to implement the reusable response struct providing the above-mentioned functionalities. Also, have a sample code to demonstrate both blocking wait and non-blocking execution.